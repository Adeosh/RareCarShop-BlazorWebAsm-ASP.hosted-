@page "/admin/car"
@page "/admin/car/{id:int}"

@inject ICarService CarService
@inject ICarEquipmentService CarEquipmentService
@inject ICategoryService CategoryService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

@if (loading)
{
    <span>@msg</span>
}
else
{
    @if (car.Editing)
    {
        <h3>Редактировать "@car.Brand"</h3>
    }
    else if (car.IsNew)
    {
        <h3>Добавить авто</h3>
    }

    <EditForm Model="car" OnValidSubmit="AddOrUpdateCar">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <div class="mb-0">
            <label for="brand">Марка</label>
            <InputText id="brand" @bind-Value="car.Brand" class="form-control"></InputText>
        </div>
        <div class="mb-0">
            <label for="imageUrl1">Изображение 1</label>
            <InputText id="imageUrl1" @bind-Value="car.ImageUrl1" class="form-control"></InputText>
        </div>
        <div class="mb-0">
            <label for="imageUrl2">Изображение 2</label>
            <InputText id="imageUrl2" @bind-Value="car.ImageUrl2" class="form-control"></InputText>
        </div>
        <div class="mb-0">
            <label for="imageUrl3">Изображение 3</label>
            <InputText id="imageUrl3" @bind-Value="car.ImageUrl3" class="form-control"></InputText>
        </div>
        <div class="mb-0" style="display: flex; flex-wrap: wrap; flex-direction: row; justify-content: center;">
            @if (!string.IsNullOrEmpty(car.ImageUrl1))
            {
                <img src="@car.ImageUrl1" />
            }
            else
            {
                foreach (var image in car.Images)
                {
                    <MudCard Class="ma-2">
                        <MudCardContent>
                            <MudImage Src="@image.Data" />
                        </MudCardContent>
                        <MudCardActions Style="justify-content: center;">
                            <MudButton Variant="Variant.Filled"
                                       Color="Color.Error"
                                       OnClick="@(() => RemoveImage(image.Id))">
                                Убрать
                            </MudButton>
                        </MudCardActions>
                    </MudCard>
                }
            }
        </div>
        <div class="mb-0">
            <label for="images">Загрузить изображение 1</label>
            <InputFile id="images" OnChange="OnFileChange" multiple class="form-control"></InputFile>
        </div>
        <div class="mb-0" style="display: flex; flex-wrap: wrap; flex-direction: row; justify-content: center;">
            @if (!string.IsNullOrEmpty(car.ImageUrl2))
            {
                <img src="@car.ImageUrl2" />
            }
            else
            {
                foreach (var image in car.Images)
                {
                    <MudCard Class="ma-2">
                        <MudCardContent>
                            <MudImage Src="@image.Data" />
                        </MudCardContent>
                        <MudCardActions Style="justify-content: center;">
                            <MudButton Variant="Variant.Filled"
                                       Color="Color.Error"
                                       OnClick="@(() => RemoveImage(image.Id))">
                                Убрать
                            </MudButton>
                        </MudCardActions>
                    </MudCard>
                }
            }
        </div>
        <div class="mb-0">
            <label for="images">Загрузить изображение 2</label>
            <InputFile id="images" OnChange="OnFileChange" multiple class="form-control"></InputFile>
        </div>
        <div class="mb-0" style="display: flex; flex-wrap: wrap; flex-direction: row; justify-content: center;">
            @if (!string.IsNullOrEmpty(car.ImageUrl3))
            {
                <img src="@car.ImageUrl3" />
            }
            else
            {
                foreach (var image in car.Images)
                {
                    <MudCard Class="ma-2">
                        <MudCardContent>
                            <MudImage Src="@image.Data" />
                        </MudCardContent>
                        <MudCardActions Style="justify-content: center;">
                            <MudButton Variant="Variant.Filled"
                                       Color="Color.Error"
                                       OnClick="@(() => RemoveImage(image.Id))">
                                Убрать
                            </MudButton>
                        </MudCardActions>
                    </MudCard>
                }
            }
        </div>
        <div class="mb-0">
            <label for="images">Загрузить изображение 3</label>
            <InputFile id="images" OnChange="OnFileChange" multiple class="form-control"></InputFile>
        </div>
        <div class="mb-0">
            <label for="description">Описание</label>
            <InputTextArea id="description" @bind-Value="car.Description" class="form-control"></InputTextArea>
        </div>
        <div class="mb-0">
            <label for="body-type">Тип кузова</label>
            <InputText id="body-type" @bind-Value="car.BodyType" class="form-control"></InputText>
        </div>
        <div class="mb-0">
            <label for="drivetrain">Трансмиссия(привод)</label>
            <InputText id="drivetrain" @bind-Value="car.Drivetrain" class="form-control"></InputText>
        </div>
        <div class="mb-0">
            <label for="engine-capacity">Мощность двигателя</label>
            <InputText id="engine-capacity" @bind-Value="car.EngineCapacity" class="form-control"></InputText>
        </div>
        <div class="mb-0">
            <label for="max-speed">Максимальная скорость</label>
            <InputText id="max-speed" @bind-Value="car.MaxSpeed" class="form-control"></InputText>
        </div>
        <hr />
        <div class="header">
            <div class="col">Комплектация / Вариант</div>
            <div class="col">Нанешняя цена</div>
            <div class="col">Оригинальная цена</div>
            <div class="col">Доступ</div>
            <div class="col"></div>
        </div>
        @foreach (var variant in car.Variants)
        {
            <div class="row">
                <div class="col">
                    <InputSelect disabled="@variant.Deleted" @bind-Value="variant.CarEquipmentId" class="form-control">
                        @foreach (var carEquipment in CarEquipmentService.CarsEquipment)
                        {
                            <option value="@carEquipment.Id.ToString()">@carEquipment.Name</option>
                        }
                    </InputSelect>
                </div>
                <div class="col">
                    <InputNumber @bind-Value="variant.Price" class="form-control" disabled="@variant.Deleted"></InputNumber>
                </div>
                <div class="col">
                    <InputNumber @bind-Value="variant.OriginalPrice" class="form-control" disabled="@variant.Deleted"></InputNumber>
                </div>
                <div class="col col-visible">
                    <InputCheckbox @bind-Value="variant.Visible" style="transform:scale(1.5,1.5);" disabled="@variant.Deleted"></InputCheckbox>
                </div>
                <div class="col">
                    <button type="button" class="btn btn-primary" disabled="@variant.Deleted" @onclick="@(() => RemoveVariant(variant.CarEquipmentId))">
                        <i class="oi oi-trash"></i>
                    </button>
                </div>
            </div>
        }
        <button type="button" class="btn btn-primary" @onclick="AddVariant">
            <i class="oi oi-plus"></i> Добавить
        </button>
        <hr />
        <div class="mb-0">
            <label for="category">Категория</label>
            <InputSelect id="category" @bind-Value="car.CategoryId" class="form-control">
                @foreach (var category in CategoryService.AdminCategories)
                {
                    <option value="@category.Id">@category.Name</option>
                }
            </InputSelect>
        </div>
        <hr />
        <div class="form-check">
            <InputCheckbox id="featured" @bind-Value="car.Featured" class="form-check-input"></InputCheckbox>
            <label for="featured" class="form-check-label">Свежее поступление</label>
        </div>
        <div class="form-check">
            <InputCheckbox id="visible" @bind-Value="car.Visible" class="form-check-input"></InputCheckbox>
            <label for="visible" class="form-check-label">Доступ</label>
        </div>
        <hr />
        <button type="submit" class="btn btn-primary float-end">@btnText</button>
        <ValidationSummary></ValidationSummary>
    </EditForm>
    @if (!car.IsNew)
    {
        <button type="button" class="btn btn-danger float-start" @onclick="DeleteCar">
            Удалить авто
        </button>
    }
}

@code {
    [Parameter]
    public int Id { get; set; }

    Car car = new Car();
    bool loading = true;
    string btnText = "";
    string msg = "...";

    protected override async Task OnInitializedAsync()
    {
        await CarEquipmentService.GetCarEquipments();
        await CategoryService.GetAdminCategories();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id == 0)
        {
            car = new Car { IsNew = true };
            btnText = "Создать автомобиль";
        }
        else
        {
            Car dbCar = (await CarService.GetCar(Id)).Data;
            if (dbCar == null)
            {
                msg = $"Продукт с идентификатором '{Id}' не существует!";
                return;
            }
            car = dbCar;
            car.Editing = true;
            btnText = "Обновить автомобиль";
        }
        loading = false;
    }

    async Task OnFileChange(InputFileChangeEventArgs e)
    {
        var format = "image/png";
        foreach (var image in e.GetMultipleFiles(int.MaxValue))
        {
            var resizedImage = await image.RequestImageFileAsync(format, 200, 200);
            var buffer = new byte[resizedImage.Size];
            await resizedImage.OpenReadStream().ReadAsync(buffer);
            var imageData = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
            car.Images.Add(new Image { Data = imageData });
        }
    }

    void RemoveImage(int id)
    {
        var image = car.Images.FirstOrDefault(i => i.Id == id);
        if (image != null)
        {
            car.Images.Remove(image);
        }
    }

    async void AddOrUpdateCar()
    {
        if (car.IsNew)
        {
            var result = await CarService.CreateCar(car);
            NavigationManager.NavigateTo($"admin/car/{result.Id}");
        }
        else
        {
            car.IsNew = false;
            car = await CarService.UpdateCar(car);
            NavigationManager.NavigateTo($"admin/car/{car.Id}", true);
        }
    }

    async void DeleteCar()
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("Подтвердите",
            $"Вы действительно хотите удалить '{car.Brand}'?");

        if (confirmed)
        {
            await CarService.DeleteCar(car);
            NavigationManager.NavigateTo("admin/cars");
        }
    }

    void AddVariant()
    {
        car.Variants
            .Add(new PriceVariant { IsNew = true, CarId = car.Id });
    }

    void RemoveVariant(int carEquipmentId)
    {
        var variant = car.Variants.Find(v => v.CarEquipmentId == carEquipmentId);
        if (variant == null)
        {
            return;
        }
        if (variant.IsNew)
        {
            car.Variants.Remove(variant);
        }
        else
        {
            variant.Deleted = true;
        }
    }
}